Re-cloned and created a new fork from the repo to add logs. Cleared some problematic usage of GitHub.

Chapter 2
·Introduced Tactic: rw (rewrite)
    1. Looking for an applicable pattern throughout the goal statement which matches the LHS of the theorem,
       then replace that pattern with RHS of the theorem.
       i.e. rw [<theorem> <objects s.t. the theorem applies to>] -- This applies the theorem from LHS to RHS.
            rw [\l <theorem> <objects s.t. the theorem applies to>] -- '\l' forms a left arrow. This applies the theorem from RHS to LHS.
       Lean4 is very specific about the theorems and the objects that the theorem applies to.
       If the objects are unspecified or partially specified in the code,
       Lean4 will look for the correct pattern from left to right and apply the theorem to the first pattern it finds.
       Moreover, Lean4 always interprets a * b * c as (a * b) * c as a default setting. Be careful when using associativity theorems.
       Some theorems automatically handle the default 'left-associativity', but some do not.
       If Lean cannot find the respective pattern the try play with associativity.
       Throughout the proof, if Lean4 did not raise any error in the process and the goal is accomplished, then the proof is believed to be correct.
    2. To rewrite one assumption based on another propositions.
       i.e. rw [<theorem>] at <assumption> -- Apply a theorem to an assumption so that the content in the assumption is changed.
    nth_rw (rewrite when encounter the nth pattern)
    i.e. nth_rw k [<theorem>] -- Theorem activates when the kth applicable pattern is found.
·Introduced Keyword: calc (proof by algebraic calculation)
    To indicate that the goal is achieved by different proof blocks that relate LHS and RHS algebraically.
    i.e. calc
           A ~ B := by       -- ~ indicates some relation between expression A and B.
             <proof block 1> -- A proof block that shows A ~ B.
           _ ~ C := by       -- _ indicates the RHS of the previous relation.
             <proof block 2> -- A proof block that shows B ~ C.
           _ ~ D := by       -- Etc.
             <proof block 3>
·Introduced Tactic: exact (an assumption exactly matches the goal)
    To announce that the content of the assumption is exactly the goal.
    i.e. exact <assumption> -- Usually at the end of rewriting the assumption.
·Introduced Tactic: apply (apply a theorem under a hypothesis/proposition)
    To unify a theorem and a hypothesis, forming a new statement which is not necessarily the ultimate goal of the proof.
    The missing pieces are either inferred automatically by Lean or become the next goal to prove.
    i.e. apply <theorem> <hypothesis>
·Introduced Tactic: ring (contains all commutative ring axiom)
    Automatically prove any trivial result that follows purely from the commutative ring axioms.
    Commutativity is NOT promised by the type Ring in general.
·Introduced Tactic: have (introduce a new goal as a proposition)
    Once the new goal is accomplished, this proposition can be used to prove the main goal.
    i.e. theorem <name of the theorem> (<type of the argument(s)>) : <statement of the theorem> := by
           have <name of proposition> : <statement of proposition> := by
             <proof of the proposition>
           <main proof>
